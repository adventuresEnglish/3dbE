(function (d3) {
  'use strict';

  const randNum = () => Math.floor(Math.random() * 256);
  const randomColor = () => `rgb(${randNum()}, ${randNum()}, ${randNum()})`;
    
  let color;
  let color2;
  let color3;
  let color4;

  setInterval(() => {color = randomColor();}, 1000);
  setInterval(() => {color2 = randomColor();}, 2000);
  setInterval(() => {color3 = randomColor();}, 500);
  setInterval(() => {color4 = randomColor();}, 200);

  function vizData(selection, data) {


    selection
      .selectAll('circle')
      .data(data)
      .attr('r', (d) => d.r) // i put r up here to show that it only needs to be assigned once
      .join('circle') // join does what merge and enter append do together
      .attr('fill', color)
      .attr('stroke', color2)
      .attr('stroke-width', 10)
      .attr('cx', (d) => d.x)
      .attr('cy', (d) => d.y);
    
      selection
      .selectAll('rect')
      .data(data)
      .attr('height', (d) => d.r)
    	.attr('width', (d) => d.r)// i put r up here to show that it only needs to be assigned once
      .join('rect') // join does what merge and enter append do together
      .attr('fill', color3)
      .attr('stroke', color4)
      .attr('stroke-width', 4)
      .attr('x', (d) => d.x - d.r/2)
      .attr('y', (d) => d.y - d.r/2);
  }

  function makeData(t) {
    const n = 12 + Math.sin(t) * 12;
    
    const data = d3.range(n).map((d) => ({
      x: d * 35 + 50,
      y: 250 + Math.sin(d * t) * 100,
      r: 15 + Math.sin(d * .5 + t * 2) * 10,
    }));
    return data;
  }

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height);
    
  let t = 0;
  let counter = 20;
  let factor = 0;

  setInterval(() => {
  	factor % 2 == 0 ? counter+=90 : counter-=90;
  	factor++;
  }, 4000); 

  function zenout() {
  		svg.call(vizData, makeData(t));
    	t += 0.008; 
      setTimeout(zenout, 1000/counter);
  }

  setTimeout(zenout, 1000/counter);

    	

    
  //let intervalSpeed;
  //let t = 0;
  //const zenout = setInterval(function() {
  //  	svg 	
  //    	.call(vizData, makeData(t))
  //  	t += 0.008; 
  //	}, 1000 /   intervalSpeed)
  //intervalSpeed = Math.random() * 100 + 20;

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInZpekRhdGEuanMiLCJtYWtlRGF0YS5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJhbmROdW0gPSAoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpO1xuY29uc3QgcmFuZG9tQ29sb3IgPSAoKSA9PiBgcmdiKCR7cmFuZE51bSgpfSwgJHtyYW5kTnVtKCl9LCAke3JhbmROdW0oKX0pYDtcbiAgXG5sZXQgY29sb3I7XG5sZXQgY29sb3IyO1xubGV0IGNvbG9yMztcbmxldCBjb2xvcjQ7XG5cbnNldEludGVydmFsKCgpID0+IHtjb2xvciA9IHJhbmRvbUNvbG9yKCl9LCAxMDAwKVxuc2V0SW50ZXJ2YWwoKCkgPT4ge2NvbG9yMiA9IHJhbmRvbUNvbG9yKCl9LCAyMDAwKVxuc2V0SW50ZXJ2YWwoKCkgPT4ge2NvbG9yMyA9IHJhbmRvbUNvbG9yKCl9LCA1MDApXG5zZXRJbnRlcnZhbCgoKSA9PiB7Y29sb3I0ID0gcmFuZG9tQ29sb3IoKX0sIDIwMClcblxuZXhwb3J0IGZ1bmN0aW9uIHZpekRhdGEoc2VsZWN0aW9uLCBkYXRhKSB7XG5cblxuICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgIC5kYXRhKGRhdGEpXG4gICAgLmF0dHIoJ3InLCAoZCkgPT4gZC5yKSAvLyBpIHB1dCByIHVwIGhlcmUgdG8gc2hvdyB0aGF0IGl0IG9ubHkgbmVlZHMgdG8gYmUgYXNzaWduZWQgb25jZVxuICAgIC5qb2luKCdjaXJjbGUnKSAvLyBqb2luIGRvZXMgd2hhdCBtZXJnZSBhbmQgZW50ZXIgYXBwZW5kIGRvIHRvZ2V0aGVyXG4gICAgLmF0dHIoJ2ZpbGwnLCBjb2xvcilcbiAgICAuYXR0cignc3Ryb2tlJywgY29sb3IyKVxuICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxMClcbiAgICAuYXR0cignY3gnLCAoZCkgPT4gZC54KVxuICAgIC5hdHRyKCdjeScsIChkKSA9PiBkLnkpO1xuICBcbiAgICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAuZGF0YShkYXRhKVxuICAgIC5hdHRyKCdoZWlnaHQnLCAoZCkgPT4gZC5yKVxuICBcdC5hdHRyKCd3aWR0aCcsIChkKSA9PiBkLnIpLy8gaSBwdXQgciB1cCBoZXJlIHRvIHNob3cgdGhhdCBpdCBvbmx5IG5lZWRzIHRvIGJlIGFzc2lnbmVkIG9uY2VcbiAgICAuam9pbigncmVjdCcpIC8vIGpvaW4gZG9lcyB3aGF0IG1lcmdlIGFuZCBlbnRlciBhcHBlbmQgZG8gdG9nZXRoZXJcbiAgICAuYXR0cignZmlsbCcsIGNvbG9yMylcbiAgICAuYXR0cignc3Ryb2tlJywgY29sb3I0KVxuICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCA0KVxuICAgIC5hdHRyKCd4JywgKGQpID0+IGQueCAtIGQuci8yKVxuICAgIC5hdHRyKCd5JywgKGQpID0+IGQueSAtIGQuci8yKTtcbn1cbiIsImltcG9ydCB7IHJhbmdlIH0gZnJvbSAnZDMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZURhdGEodCkge1xuICBjb25zdCBuID0gMTIgKyBNYXRoLnNpbih0KSAqIDEyO1xuICBcbiAgY29uc3QgZGF0YSA9IHJhbmdlKG4pLm1hcCgoZCkgPT4gKHtcbiAgICB4OiBkICogMzUgKyA1MCxcbiAgICB5OiAyNTAgKyBNYXRoLnNpbihkICogdCkgKiAxMDAsXG4gICAgcjogMTUgKyBNYXRoLnNpbihkICogLjUgKyB0ICogMikgKiAxMCxcbiAgfSkpO1xuICByZXR1cm4gZGF0YTtcbn0iLCJpbXBvcnQgeyBzZWxlY3QgfSBmcm9tICdkMyc7XG5pbXBvcnQgeyB2aXpEYXRhLCB2aXpEYXRhMiB9IGZyb20gJy4vdml6RGF0YSc7XG5pbXBvcnQgeyBtYWtlRGF0YSB9IGZyb20gJy4vbWFrZURhdGEnO1xuXG5jb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ2JvZHknKVxuICAuYXBwZW5kKCdzdmcnKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG4gIFxubGV0IHQgPSAwO1xubGV0IGNvdW50ZXIgPSAyMDtcbmxldCBmYWN0b3IgPSAwO1xuXG5zZXRJbnRlcnZhbCgoKSA9PiB7XG5cdGZhY3RvciAlIDIgPT0gMCA/IGNvdW50ZXIrPTkwIDogY291bnRlci09OTA7XG5cdGZhY3RvcisrXG59LCA0MDAwKSBcblxuZnVuY3Rpb24gemVub3V0KCkge1xuXHRcdHN2Zy5jYWxsKHZpekRhdGEsIG1ha2VEYXRhKHQpKTtcbiAgXHR0ICs9IDAuMDA4OyBcbiAgICBzZXRUaW1lb3V0KHplbm91dCwgMTAwMC9jb3VudGVyKTtcbn1cblxuc2V0VGltZW91dCh6ZW5vdXQsIDEwMDAvY291bnRlcik7XG5cbiAgXHRcblxuICBcbi8vbGV0IGludGVydmFsU3BlZWQ7XG4vL2xldCB0ID0gMDtcbi8vY29uc3QgemVub3V0ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4vLyAgXHRzdmcgXHRcbi8vICAgIFx0LmNhbGwodml6RGF0YSwgbWFrZURhdGEodCkpXG4vLyAgXHR0ICs9IDAuMDA4OyBcbi8vXHR9LCAxMDAwIC8gICBpbnRlcnZhbFNwZWVkKVxuLy9pbnRlcnZhbFNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDEwMCArIDIwOyJdLCJuYW1lcyI6WyJyYW5nZSIsInNlbGVjdCJdLCJtYXBwaW5ncyI6Ijs7O0VBQUEsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztFQUN0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDMUU7RUFDQSxJQUFJLEtBQUssQ0FBQztFQUNWLElBQUksTUFBTSxDQUFDO0VBQ1gsSUFBSSxNQUFNLENBQUM7RUFDWCxJQUFJLE1BQU0sQ0FBQztBQUNYO0VBQ0EsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsV0FBVyxHQUFFLENBQUMsRUFBRSxJQUFJLEVBQUM7RUFDaEQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsV0FBVyxHQUFFLENBQUMsRUFBRSxJQUFJLEVBQUM7RUFDakQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsV0FBVyxHQUFFLENBQUMsRUFBRSxHQUFHLEVBQUM7RUFDaEQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsV0FBVyxHQUFFLENBQUMsRUFBRSxHQUFHLEVBQUM7QUFDaEQ7RUFDTyxTQUFTLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFO0FBQ3pDO0FBQ0E7RUFDQSxFQUFFLFNBQVM7RUFDWCxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7RUFDeEIsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDMUIsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDO0VBQ25CLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7RUFDeEIsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztFQUMzQixLQUFLLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDO0VBQzdCLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzNCLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUI7RUFDQSxJQUFJLFNBQVM7RUFDYixLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUM7RUFDdEIsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQ2YsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0IsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDO0VBQ2pCLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7RUFDekIsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztFQUMzQixLQUFLLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0VBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbkM7O0VDcENPLFNBQVMsUUFBUSxDQUFDLENBQUMsRUFBRTtFQUM1QixFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztFQUNsQztFQUNBLEVBQUUsTUFBTSxJQUFJLEdBQUdBLFFBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07RUFDcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO0VBQ2xCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHO0VBQ2xDLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUU7RUFDekMsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNOLEVBQUUsT0FBTyxJQUFJLENBQUM7RUFDZDs7RUNQQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0VBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDbEM7RUFDQSxNQUFNLEdBQUcsR0FBR0MsU0FBTSxDQUFDLE1BQU0sQ0FBQztFQUMxQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDaEIsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztFQUN2QixHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDMUI7RUFDQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7RUFDakIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ2Y7RUFDQSxXQUFXLENBQUMsTUFBTTtFQUNsQixDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFFLEVBQUUsQ0FBQztFQUM3QyxDQUFDLE1BQU0sR0FBRTtFQUNULENBQUMsRUFBRSxJQUFJLEVBQUM7QUFDUjtFQUNBLFNBQVMsTUFBTSxHQUFHO0VBQ2xCLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDakMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDO0VBQ2QsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNyQyxDQUFDO0FBQ0Q7RUFDQSxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQztFQUNBO0FBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7Ozs7In0=