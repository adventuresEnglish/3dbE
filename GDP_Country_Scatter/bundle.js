(function () {
        'use strict';

        const addCommas = new RegExp(/\B(?=(\d{3})+(?!\d))/, "g");

                const numMaker = (num, abbr, zeros, fix) => {
                  num = num / Math.pow(10, zeros);
                  return num.toFixed(fix).replace(addCommas, ",") + ` ${abbr}`
                  };

        const {
                csv,
                select,
                scaleLinear,
                extent,
                axisLeft,
                axisBottom,
              } = d3;
              
        			const countryName = new Intl.DisplayNames(['en'], { type: 'region' });     
              const csvUrl = [
                'https://raw.githubusercontent.com/',
                'curran/', // username
                'data/', // id of gist
                '511657d36bafbc5a19dee5109ce26cb137f0b77b/all/', //commit
                'integrated_population_vs_gdp.csv', //file name
              ].join('');
              
              const width = window.innerWidth;
              const height = window.innerHeight;

              const margin = {
                top: 30,
                right: 20,
                bottom: 45,
                left: 120,
              };

              const svg = select('body')
                .append('svg')
                .attr('width', width)
                .attr('height', height);

              svg.append("text")
                .attr("x", width/2)
                .attr("y", 20)
                .attr("text-anchor", "middle")
                .style("font-size", "16px")
                .text("Worldwide GDP and Population (1980)");

              svg.append("text")
                .attr("transform", "translate(" + (width/2) + " ," + (height-5) + ")")
                .style("text-anchor", "middle")
                .text("Population");

              svg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("x", -(height/2))
                .attr("y", 15)
                .style("text-anchor", "middle")
                .text("GDP");
              
              const parseRow = (d) => {
                d.population = +d.population,
                d.gdp = +d.gdp;
                //d.country_code = countryName.of(d.country_code);
                	return d;
              };

              
              const xValue = (d) => d.gdp;
              const yValue = (d) => d.population;
              const r = 3;

              const main = async () => {
                const data = await csv(csvUrl, parseRow);

                const x = scaleLinear()
                  .domain(extent(data, xValue))
                  .range([
                    margin.left,
                    width - margin.right,
                  ]);

                const y = scaleLinear()
                  .domain(extent(data, yValue))
                  .range([
                    height - margin.bottom,
                    margin.top,
                  ]);
   				
                const GDPInBil = (d, fix) => numMaker(d, 'B', 9, fix);
                const popInMil = (d, fix) => numMaker(d, 'M', 6, fix);
                const GDPPerCap = (d, fix) => numMaker(d, 'K', 3, fix);

                const marks = data.map(d => ({
                  x: x(xValue(d)),
                  y: y(yValue(d)),
                  title: `Country: ${d.country_code}\nGDP: ${GDPInBil(xValue(d), 1)}\nPopulation: ${popInMil(yValue(d), 1)}\nGDP per capita: ${GDPPerCap(xValue(d) / yValue(d), 2)}`,
                }));
                
                svg
                  .selectAll('circle')
                  .data(marks)
                  .join('circle')
                  .attr('cx', (d) => d.x)
                  .attr('cy', (d) => d.y)
                  .attr('r', r)
                	.append('title')
                    .text(d => d.title);

                svg
                  .append('g')
                  .attr(
                  	'transform', 
                  	`translate(${margin.left}, 0)`
                	)
                  .call(axisLeft(y)
                       .tickFormat(d => popInMil(d, 0))
                  );

                svg
                  .append('g')
                  .attr(
                  	'transform', 
                  	`translate(0, ${height - margin.bottom})`
                	)
                  .call(axisBottom(x)
              			.tickFormat(d => GDPInBil(d, 0))
                  );
              };
              main();

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,