(function (d3) {
  'use strict';

  function vizData(selection, data) {
   
      const lines = data.reduce((accumulator, currentValue, index) => {
        
        const nextElement = data[index + 1];
        if(typeof nextElement !== 'undefined') {
          accumulator.push({
            'x1': currentValue.x,
            'y1': currentValue.y,
            'x2': nextElement.x,
            'y2': nextElement.y,
            'r': currentValue.r,
          });
        }
        return accumulator;
      }, []);
       

     selection
      .selectAll('line')
      .data(lines)
      .join('line')
      .attr('x1', (d) => d.x1)
      .attr('y1', (d) => d.y1)
    	.attr('x2', (d) => d.x2)
      .attr('y2', (d) => d.y2) 
    	.attr('stroke', 'lime')
      .attr('stroke-width', (d) => d.r);

    selection
      .selectAll('circle')
      .data(data)
      .attr('r', (d) => d.r) // i put r up here to show that it only needs to be assigned once
      .join('circle') // join does what merge and enter append do together
      .attr('fill', 'green')
      .attr('stroke', 'teal')
      .attr('stroke-width', 10)
      .attr('cx', (d) => d.x)
      .attr('cy', (d) => d.y);
    
      selection
      .selectAll('rect')
      .data(data)
      .attr('height', (d) => d.r)
    	.attr('width', (d) => d.r)// i put r up here to show that it only needs to be assigned once
      .join('rect') // join does what merge and enter append do together
      .attr('fill', 'red')
      .attr('stroke', 'yellow')
      .attr('stroke-width', 4)
      .attr('x', (d) => d.x - d.r/2)
      .attr('y', (d) => d.y - d.r/2);
  }

  function makeData(t) {
    const n = 10 + Math.sin(t) * 10;
    
    const data = d3.range(n).map((d) => ({
      x: d * 40 + 50,
      y: 250 + Math.sin(d * 2000 + t) * 220,
      r: 15 + Math.sin(d * .5 + t * 2) * 10,
    }));
    return data;
  }

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height);
    
  let t = 0;
  setInterval(() => {
   
    svg 	
      .call(vizData, makeData(t));

    t += 0.005;
  }, 1000 /60 );

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInZpekRhdGEuanMiLCJtYWtlRGF0YS5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJhbmRvbUNvbG9yID0gKCkgPT5cbiAgYHJnYigke01hdGguZmxvb3IoXG4gICAgTWF0aC5yYW5kb20oKSAqIDI1NlxuICApfSwgJHtNYXRoLmZsb29yKFxuICAgIE1hdGgucmFuZG9tKCkgKiAyNTVcbiAgKX0sICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU1KX0pYDtcblxuZXhwb3J0IGZ1bmN0aW9uIHZpekRhdGEoc2VsZWN0aW9uLCBkYXRhKSB7XG4gXG4gICAgY29uc3QgbGluZXMgPSBkYXRhLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgIFxuICAgICAgY29uc3QgbmV4dEVsZW1lbnQgPSBkYXRhW2luZGV4ICsgMV07XG4gICAgICBpZih0eXBlb2YgbmV4dEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goe1xuICAgICAgICAgICd4MSc6IGN1cnJlbnRWYWx1ZS54LFxuICAgICAgICAgICd5MSc6IGN1cnJlbnRWYWx1ZS55LFxuICAgICAgICAgICd4Mic6IG5leHRFbGVtZW50LngsXG4gICAgICAgICAgJ3kyJzogbmV4dEVsZW1lbnQueSxcbiAgICAgICAgICAncic6IGN1cnJlbnRWYWx1ZS5yLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9LCBbXSk7XG4gICAgIFxuXG4gICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdsaW5lJylcbiAgICAuZGF0YShsaW5lcylcbiAgICAuam9pbignbGluZScpXG4gICAgLmF0dHIoJ3gxJywgKGQpID0+IGQueDEpXG4gICAgLmF0dHIoJ3kxJywgKGQpID0+IGQueTEpXG4gIFx0LmF0dHIoJ3gyJywgKGQpID0+IGQueDIpXG4gICAgLmF0dHIoJ3kyJywgKGQpID0+IGQueTIpIFxuICBcdC5hdHRyKCdzdHJva2UnLCAnbGltZScpXG4gICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkKSA9PiBkLnIpO1xuXG4gIHNlbGVjdGlvblxuICAgIC5zZWxlY3RBbGwoJ2NpcmNsZScpXG4gICAgLmRhdGEoZGF0YSlcbiAgICAuYXR0cigncicsIChkKSA9PiBkLnIpIC8vIGkgcHV0IHIgdXAgaGVyZSB0byBzaG93IHRoYXQgaXQgb25seSBuZWVkcyB0byBiZSBhc3NpZ25lZCBvbmNlXG4gICAgLmpvaW4oJ2NpcmNsZScpIC8vIGpvaW4gZG9lcyB3aGF0IG1lcmdlIGFuZCBlbnRlciBhcHBlbmQgZG8gdG9nZXRoZXJcbiAgICAuYXR0cignZmlsbCcsICdncmVlbicpXG4gICAgLmF0dHIoJ3N0cm9rZScsICd0ZWFsJylcbiAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMTApXG4gICAgLmF0dHIoJ2N4JywgKGQpID0+IGQueClcbiAgICAuYXR0cignY3knLCAoZCkgPT4gZC55KTtcbiAgXG4gICAgc2VsZWN0aW9uXG4gICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgLmRhdGEoZGF0YSlcbiAgICAuYXR0cignaGVpZ2h0JywgKGQpID0+IGQucilcbiAgXHQuYXR0cignd2lkdGgnLCAoZCkgPT4gZC5yKS8vIGkgcHV0IHIgdXAgaGVyZSB0byBzaG93IHRoYXQgaXQgb25seSBuZWVkcyB0byBiZSBhc3NpZ25lZCBvbmNlXG4gICAgLmpvaW4oJ3JlY3QnKSAvLyBqb2luIGRvZXMgd2hhdCBtZXJnZSBhbmQgZW50ZXIgYXBwZW5kIGRvIHRvZ2V0aGVyXG4gICAgLmF0dHIoJ2ZpbGwnLCAncmVkJylcbiAgICAuYXR0cignc3Ryb2tlJywgJ3llbGxvdycpXG4gICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDQpXG4gICAgLmF0dHIoJ3gnLCAoZCkgPT4gZC54IC0gZC5yLzIpXG4gICAgLmF0dHIoJ3knLCAoZCkgPT4gZC55IC0gZC5yLzIpO1xufVxuIiwiaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICdkMyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGF0YSh0KSB7XG4gIGNvbnN0IG4gPSAxMCArIE1hdGguc2luKHQpICogMTA7XG4gIFxuICBjb25zdCBkYXRhID0gcmFuZ2UobikubWFwKChkKSA9PiAoe1xuICAgIHg6IGQgKiA0MCArIDUwLFxuICAgIHk6IDI1MCArIE1hdGguc2luKGQgKiAyMDAwICsgdCkgKiAyMjAsXG4gICAgcjogMTUgKyBNYXRoLnNpbihkICogLjUgKyB0ICogMikgKiAxMCxcbiAgfSkpO1xuICByZXR1cm4gZGF0YTtcbn0iLCJpbXBvcnQgeyBzZWxlY3QgfSBmcm9tICdkMyc7XG5pbXBvcnQgeyB2aXpEYXRhLCB2aXpEYXRhMiB9IGZyb20gJy4vdml6RGF0YSc7XG5pbXBvcnQgeyBtYWtlRGF0YSB9IGZyb20gJy4vbWFrZURhdGEnO1xuXG5jb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ2JvZHknKVxuICAuYXBwZW5kKCdzdmcnKVxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XG4gIFxubGV0IHQgPSAwO1xuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuIFxuICBzdmcgXHRcbiAgICAuY2FsbCh2aXpEYXRhLCBtYWtlRGF0YSh0KSlcblxuICB0ICs9IDAuMDA1O1xufSwgMTAwMCAvNjAgKTtcblxuXG5cblxuXG5cblxuXG5cbiJdLCJuYW1lcyI6WyJyYW5nZSIsInNlbGVjdCJdLCJtYXBwaW5ncyI6Ijs7O0VBT08sU0FBUyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRTtFQUN6QztFQUNBLElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxLQUFLO0VBQ3BFO0VBQ0EsTUFBTSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzFDLE1BQU0sR0FBRyxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7RUFDN0MsUUFBUSxXQUFXLENBQUMsSUFBSSxDQUFDO0VBQ3pCLFVBQVUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0VBQzlCLFVBQVUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0VBQzlCLFVBQVUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0VBQzdCLFVBQVUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0VBQzdCLFVBQVUsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDO0VBQzdCLFNBQVMsQ0FBQyxDQUFDO0VBQ1gsT0FBTztFQUNQLE1BQU0sT0FBTyxXQUFXLENBQUM7RUFDekIsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ1g7QUFDQTtFQUNBLEdBQUcsU0FBUztFQUNaLEtBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQztFQUN0QixLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7RUFDaEIsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDO0VBQ2pCLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0VBQzVCLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0VBQzVCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0VBQzNCLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0VBQzVCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7RUFDMUIsS0FBSyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QztFQUNBLEVBQUUsU0FBUztFQUNYLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQztFQUN4QixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxQixLQUFLLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDbkIsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztFQUMxQixLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO0VBQzNCLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUM7RUFDN0IsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0IsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QjtFQUNBLElBQUksU0FBUztFQUNiLEtBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQztFQUN0QixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDZixLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM3QixLQUFLLElBQUksQ0FBQyxNQUFNLENBQUM7RUFDakIsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztFQUN4QixLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO0VBQzdCLEtBQUssSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7RUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuQzs7RUN4RE8sU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFO0VBQzVCLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0VBQ2xDO0VBQ0EsRUFBRSxNQUFNLElBQUksR0FBR0EsUUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTTtFQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7RUFDbEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHO0VBQ3pDLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUU7RUFDekMsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNOLEVBQUUsT0FBTyxJQUFJLENBQUM7RUFDZDs7RUNQQSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0VBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDbEM7RUFDQSxNQUFNLEdBQUcsR0FBR0MsU0FBTSxDQUFDLE1BQU0sQ0FBQztFQUMxQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDaEIsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztFQUN2QixHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDMUI7RUFDQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDVixXQUFXLENBQUMsTUFBTTtFQUNsQjtFQUNBLEVBQUUsR0FBRztFQUNMLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFDL0I7RUFDQSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDYixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTs7OzsifQ==