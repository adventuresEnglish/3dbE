(function (d3) {
  'use strict';

  const scatterPlot = () => {
    let width;
    let height;
    let data;
    let xValue;
    let yValue;
    let margin;
    let radius;
    let xLabel;
    let yLabel;
    let zValue;
    
    const my = (selection) => {
      const x = d3.scaleLinear()
        .domain(d3.extent(data, xValue))
        .range([margin.left, width - margin.right]);

      const y = d3.scaleLinear()
        .domain(d3.extent(data, yValue))
        .range([
          height - margin.bottom,
          margin.top,
        ]);

      const z = d3.scaleOrdinal()
        .domain(data.map((d) => d.species))
        .range(d3.schemeTableau10);

      const marks = data.map((d) => ({
        x: x(xValue(d)),
        y: y(yValue(d)),
        z: z(zValue(d)),
      }));

      const t = d3.transition().duration(2000);

      const positionCircles = (circles) => {  
        circles
          .attr('cx', (d) => d.x)
          .attr('cy', (d) => d.y);  
      };

      const setColors = (circles) => {
        circles.attr('fill', (d) => d.z);
      };
      const growRadius = (enter) => {
        enter.transition(t).attr('r', radius);
      };

      const circles = selection
        .selectAll('circle')
        .data(marks)
        .join(
          (enter) =>
            enter
              .append('circle')
              .call(positionCircles)
              .attr('r', 0)
              .call(growRadius)
          		.call(setColors),
          (update) =>
            update.call((update) =>
              update
                .transition(t)
                .delay((d, i) => i * 10)
                .call(positionCircles)
                
            ),
          (exit) => exit.remove()
        );

      selection
        .selectAll('.y-axis')
        .data([null])
        .join('g')
        .attr('class', 'y-axis')
        .attr(
          'transform',
          `translate(${margin.left},0)`
        )
        .transition(t)
        .call(d3.axisLeft(y));

      selection
        .selectAll('.x-axis')
        .data([null])
        .join('g')
        .attr('class', 'x-axis')
        .attr(
          'transform',
          `translate(0,${height - margin.bottom})`
        )
        .transition(t)
        .call(d3.axisBottom(x));
      
      const labelStyle = (selection) => {
        selection
          .style('font-size', '18px')
      		.style('font-weight', '900');
       };
        
      selection
        .selectAll('.title')
        .data([null])
        .join('text')
        .attr('x', width / 2)
        .attr('y', 23)
        .classed('title', true)
        .text('Iris');
      selection
        .selectAll('.x-label')
        .data([null])
        .join('text')
      	.attr('class', 'x-label')
        .attr(
          'transform',
          'translate(' +
            (width * .816) +
            ' ,' +
            (height - 13) +
            ')'
        )
      	.call(labelStyle)
        .text(xLabel());
      selection
        .selectAll('.y-label')
        .data([null])
        .join('text')
        .attr('class', 'y-label')
        .attr('transform', 'rotate(-90)')
        .attr('x', -181)
        .attr('y', 22)
        .call(labelStyle)
        .text(yLabel());
    };

    my.width = function (_) {
      return arguments.length
        ? ((width = +_), my)
        : width;
    };

    my.height = function (_) {
      return arguments.length
        ? ((height = +_), my)
        : height;
    };

    my.data = function (_) {
      return arguments.length
        ? ((data = _), my)
        : data;
    };

    my.xValue = function (_) {
      return arguments.length
        ? ((xValue = _), my)
        : xValue;
    };

    my.yValue = function (_) {
      return arguments.length
        ? ((yValue = _), my)
        : yValue;
    };

      my.zValue = function (_) {
      return arguments.length
        ? ((zValue = _), my)
        : zValue;
    };
    
    my.xLabel = function (_) {
      return arguments.length
        ? ((xLabel = _), my)
        : xLabel;
    };

    my.yLabel = function (_) {
      return arguments.length
        ? ((yLabel = _), my)
        : yLabel;
    };

    my.margin = function (_) {
      return arguments.length
        ? ((margin = _), my)
        : margin;
    };

    my.radius = function (_) {
      return arguments.length
        ? ((radius = +_), my)
        : radius;
    };

    return my;
  };

  const csvUrl = [
    'https://gist.githubusercontent.com/',
    'curran/', // User
    'a08a1080b88344b0c8a7/', // Id of the Gist
    'raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/', // commit
    'iris.csv', // File name
  ].join('');
  console.log(csvUrl);
  const parseRow = (d) => ({
    "Sepal Length": +d.sepal_length,
    "Sepal Width": +d.sepal_width,
    "Petal Length": +d.petal_length,
    "Petal Width": +d.petal_width,
    species: d.species
    //return d;
  });

  const width = window.innerWidth;
  const height = window.innerHeight;
  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height);

  const main = async () => {
    const plot = scatterPlot()
      .width(width)
      .height(height)
      .data(await d3.csv(csvUrl, parseRow))
      .xValue((d) => d["Petal Width"])
      .yValue((d) => d["Sepal Length"])
    	.zValue((d) => d.species)
    	.xLabel(() => "Petal Width")
      .yLabel(() => "Sepal Length")
      .margin({
        top: 20,
        right: 20,
        bottom: 50,
        left: 60,
      })
      .radius(5);

    svg.call(plot);

    const columns = [
      "Sepal Length",
  		"Sepal Width",
  		"Petal Length",
  		"Petal Width"
    ];
    let i = 0;
    setInterval(() => {
      i++;
      plot.xValue((d) => d[columns[i % columns.length]]);
      plot.xLabel((d) => [columns[i % columns.length]]);
      svg.call(plot);
    }, 4000);
  };
  main();

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,