(function (d3) {
  'use strict';

  function vizData(selection, data) {


    selection
      .selectAll('circle')
      .data(data)
      .attr('r', (d) => d.r) // i put r up here to show that it only needs to be assigned once
      .join('circle') // join does what merge and enter append do together
      .attr('fill', 'green')
      .attr('stroke', 'teal')
      .attr('stroke-width', 10)
      .attr('cx', (d) => d.x)
      .attr('cy', (d) => d.y);
    
      selection
      .selectAll('rect')
      .data(data)
      .attr('height', (d) => d.r)
    	.attr('width', (d) => d.r)// i put r up here to show that it only needs to be assigned once
      .join('rect') // join does what merge and enter append do together
      .attr('fill', 'red')
      .attr('stroke', 'yellow')
      .attr('stroke-width', 4)
      .attr('x', (d) => d.x - d.r/2)
      .attr('y', (d) => d.y - d.r/2);
  }

  function makeData(t) {
    const n = 5 + Math.sin(t) * 20;
    
    const data = d3.range(n).map((d) => ({
      x: d * 35 + 50,
      y: 250 + Math.sin(d * t) * 100,
      r: 15 + Math.sin(d * .5 + t * 2) * 10,
    }));
    return data;
  }

  const width = window.innerWidth;
  const height = window.innerHeight;

  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height);
    


    	

    
  setInterval(() => {
    let intervalSpeed = Math.random() * 30;
  	let t = 0;
  	const zenout = setInterval(function() {
    		svg 	
      		.call(vizData, makeData(t));
    		t += 0.008; 
  	}, 1000 / intervalSpeed);
  }, 3000);

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInZpekRhdGEuanMiLCJtYWtlRGF0YS5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJhbmRvbUNvbG9yID0gKCkgPT5cbiAgYHJnYigke01hdGguZmxvb3IoXG4gICAgTWF0aC5yYW5kb20oKSAqIDI1NlxuICApfSwgJHtNYXRoLmZsb29yKFxuICAgIE1hdGgucmFuZG9tKCkgKiAyNTVcbiAgKX0sICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU1KX0pYDtcblxuZXhwb3J0IGZ1bmN0aW9uIHZpekRhdGEoc2VsZWN0aW9uLCBkYXRhKSB7XG5cblxuICBzZWxlY3Rpb25cbiAgICAuc2VsZWN0QWxsKCdjaXJjbGUnKVxuICAgIC5kYXRhKGRhdGEpXG4gICAgLmF0dHIoJ3InLCAoZCkgPT4gZC5yKSAvLyBpIHB1dCByIHVwIGhlcmUgdG8gc2hvdyB0aGF0IGl0IG9ubHkgbmVlZHMgdG8gYmUgYXNzaWduZWQgb25jZVxuICAgIC5qb2luKCdjaXJjbGUnKSAvLyBqb2luIGRvZXMgd2hhdCBtZXJnZSBhbmQgZW50ZXIgYXBwZW5kIGRvIHRvZ2V0aGVyXG4gICAgLmF0dHIoJ2ZpbGwnLCAnZ3JlZW4nKVxuICAgIC5hdHRyKCdzdHJva2UnLCAndGVhbCcpXG4gICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEwKVxuICAgIC5hdHRyKCdjeCcsIChkKSA9PiBkLngpXG4gICAgLmF0dHIoJ2N5JywgKGQpID0+IGQueSk7XG4gIFxuICAgIHNlbGVjdGlvblxuICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgIC5kYXRhKGRhdGEpXG4gICAgLmF0dHIoJ2hlaWdodCcsIChkKSA9PiBkLnIpXG4gIFx0LmF0dHIoJ3dpZHRoJywgKGQpID0+IGQucikvLyBpIHB1dCByIHVwIGhlcmUgdG8gc2hvdyB0aGF0IGl0IG9ubHkgbmVlZHMgdG8gYmUgYXNzaWduZWQgb25jZVxuICAgIC5qb2luKCdyZWN0JykgLy8gam9pbiBkb2VzIHdoYXQgbWVyZ2UgYW5kIGVudGVyIGFwcGVuZCBkbyB0b2dldGhlclxuICAgIC5hdHRyKCdmaWxsJywgJ3JlZCcpXG4gICAgLmF0dHIoJ3N0cm9rZScsICd5ZWxsb3cnKVxuICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCA0KVxuICAgIC5hdHRyKCd4JywgKGQpID0+IGQueCAtIGQuci8yKVxuICAgIC5hdHRyKCd5JywgKGQpID0+IGQueSAtIGQuci8yKTtcbn1cbiIsImltcG9ydCB7IHJhbmdlIH0gZnJvbSAnZDMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZURhdGEodCkge1xuICBjb25zdCBuID0gNSArIE1hdGguc2luKHQpICogMjA7XG4gIFxuICBjb25zdCBkYXRhID0gcmFuZ2UobikubWFwKChkKSA9PiAoe1xuICAgIHg6IGQgKiAzNSArIDUwLFxuICAgIHk6IDI1MCArIE1hdGguc2luKGQgKiB0KSAqIDEwMCxcbiAgICByOiAxNSArIE1hdGguc2luKGQgKiAuNSArIHQgKiAyKSAqIDEwLFxuICB9KSk7XG4gIHJldHVybiBkYXRhO1xufSIsImltcG9ydCB7IHNlbGVjdCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IHZpekRhdGEsIHZpekRhdGEyIH0gZnJvbSAnLi92aXpEYXRhJztcbmltcG9ydCB7IG1ha2VEYXRhIH0gZnJvbSAnLi9tYWtlRGF0YSc7XG5cbmNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5jb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnYm9keScpXG4gIC5hcHBlbmQoJ3N2ZycpXG4gIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcbiAgXG5cblxuICBcdFxuXG4gIFxuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICBsZXQgaW50ZXJ2YWxTcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAzMDtcblx0bGV0IHQgPSAwO1xuXHRjb25zdCB6ZW5vdXQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgXHRcdHN2ZyBcdFxuICAgIFx0XHQuY2FsbCh2aXpEYXRhLCBtYWtlRGF0YSh0KSlcbiAgXHRcdHQgKz0gMC4wMDg7IFxuXHR9LCAxMDAwIC8gaW50ZXJ2YWxTcGVlZClcbn0sIDMwMDApXG5cbiJdLCJuYW1lcyI6WyJyYW5nZSIsInNlbGVjdCJdLCJtYXBwaW5ncyI6Ijs7O0VBT08sU0FBUyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRTtBQUN6QztBQUNBO0VBQ0EsRUFBRSxTQUFTO0VBQ1gsS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDO0VBQ3hCLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztFQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFCLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQztFQUNuQixLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0VBQzFCLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7RUFDM0IsS0FBSyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQztFQUM3QixLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzQixLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVCO0VBQ0EsSUFBSSxTQUFTO0VBQ2IsS0FBSyxTQUFTLENBQUMsTUFBTSxDQUFDO0VBQ3RCLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztFQUNmLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQy9CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdCLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUNqQixLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO0VBQ3hCLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7RUFDN0IsS0FBSyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztFQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ25DOztFQzlCTyxTQUFTLFFBQVEsQ0FBQyxDQUFDLEVBQUU7RUFDNUIsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7RUFDakM7RUFDQSxFQUFFLE1BQU0sSUFBSSxHQUFHQSxRQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNO0VBQ3BDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtFQUNsQixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRztFQUNsQyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFO0VBQ3pDLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDTixFQUFFLE9BQU8sSUFBSSxDQUFDO0VBQ2Q7O0VDUEEsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztFQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ2xDO0VBQ0EsTUFBTSxHQUFHLEdBQUdDLFNBQU0sQ0FBQyxNQUFNLENBQUM7RUFDMUIsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0VBQ2hCLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7RUFDdkIsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQzFCO0FBQ0E7QUFDQTtFQUNBO0FBQ0E7RUFDQTtFQUNBLFdBQVcsQ0FBQyxNQUFNO0VBQ2xCLEVBQUUsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztFQUN6QyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNYLENBQUMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLFdBQVc7RUFDdkMsSUFBSSxHQUFHO0VBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQztFQUNqQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDZixFQUFFLEVBQUUsSUFBSSxHQUFHLGFBQWEsRUFBQztFQUN6QixDQUFDLEVBQUUsSUFBSTs7OzsifQ==